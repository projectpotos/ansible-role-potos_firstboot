---
- name: Prepare setup directory
  ansible.builtin.file:
    path: '/setup'
    state: directory
    recurse: yes

- name: Pre commands
  ansible.builtin.shell:
    cmd: '{{ item }}'
  loop: '{{ potos_firstboot_precommands }}'
  when:
    - potos_firstboot_precommands is defined
    - potos_firstboot_precommands is iterable
    - potos_firstboot_precommands is not string
    - potos_firstboot_precommands is not mapping

- name: Make sure YAD is installed
  ansible.builtin.package:
    name: 'yad'

# - name: Ask for keyboard layout
#   block:
#     - name: deploy script for keyboard layout selection
#       ansible.builtin.template:
#         src: 'change-keyboard-layout.j2'
#         dest: '/setup/change-keyboard-layout.sh'
#         mode: '0755'
#         owner: root
#         group: root

#     - name: ask dialog
#       ansible.builtin.shell:
#         cmd: '/setup/change-keyboard-layout.sh'
#       register: potos_firstboot_keyboard_layout
#       changed_when: false

#     - name: check if keyboard file exists
#       ansible.builtin.stat:
#         path: '/etc/default/keyboard'
#       register: potos_firstboot_default_keyboard_stat

#     - name: set keyboard layout
#       ansible.builtin.replace:
#         path: '/etc/default/keyboard'
#         regexp: 'XKBLAYOUT=.*'
#         replace: 'XKBLAYOUT="{{ potos_firstboot_keyboard_layout.stdout }}"'
#       when: potos_firstboot_default_keyboard_stat.stat.exists

#     - name: check if gsettings is installed
#       ansible.builtin.shell:
#         cmd: 'gsettings help'
#       failed_when: false
#       changed_when: false
#       register: potos_firstboot_gsettings_exists

#     - name: set keyboard layout in gnome
#       ansible.builtin.shell:
#         executable: '/bin/bash'
#         cmd: gsettings set org.gnome.desktop.input-sources sources '[("xkb", "{{ potos_firstboot_keyboard_layout.stdout }}")]'
#       changed_when: false
#       when: potos_firstboot_gsettings_exists.rc == 0
#   when: potos_firstboot_ask_keyboardlayout
### Error "(process:4037): dconf-WARNING **: 19:01:19.683: failed to commit changes to dconf: The connection is closed", isn't it runnung as user gnome-initial-setup?

- name: Save old hostname
  ansible.builtin.command:
    cmd: hostname
  register: potos_firstboot_old_hostname

- name: Ask hostname
  ansible.builtin.shell:
    executable: '/bin/bash'
    cmd: |
      while [[ -z ${POTOS_HOSTNAME} ]]; do
        USERINPUT="$(yad --fullscreen --title '${POTOS_CLIENT_NAME} Hostname' \
        --borders 20 --align center \
        --button gtk-ok \
        --button "Change keyboard layout":"/setup/change-keyboard-layout.sh" \
        --image-on-top --image=/setup/potos.png \
        --text \
      "Please enter your hostname below.
      " \
        --form \
        --field 'Hostname' \
      )"

      POTOS_HOSTNAME="$(echo ${USERINPUT} | cut -d '|' -f 1)"

      if [[ -z ${POTOS_HOSTNAME} ]]; then
        yad --title "${POTOS_CLIENT_NAME} HOSTNAME" \
          --borders 20 --align center --button gtk-ok --image-on-top \
          --image=/potos-setup/potos.png \
          --text 'Please choose the hostname.'
      fi
      done
      echo $POTOS_HOSTNAME
  register: potos_firstboot_hostname_dialog
  when: potos_firstboot_ask_hostname == True

- name: Set hostname from dialog as an ansible fact
  ansible.builtin.set_fact:
    potos_firstboot_hostname: '{{ potos_firstboot_hostname_dialog.stdout }}'
  when: potos_firstboot_hostname is undefined and potos_firstboot_ask_hostname == True

- name: Set hostname
  ansible.builtin.hostname:
    name: '{{ potos_firstboot_hostname }}'
  when: potos_firstboot_hostname is defined and potos_firstboot_ask_hostname == True

- name: Adjust hosts file
  ansible.builtin.replace:
    path: '/etc/hosts'
    regexp: '{{ potos_firstboot_old_hostname.stdout }}'
    replace: '{{ potos_firstboot_hostname }}'
  when:
    - potos_firstboot_hostname is defined
    - potos_firstboot_old_hostname.stdout != ''
    - potos_firstboot_ask_hostname == True

- name: Ask new user
  ansible.builtin.shell:
    executable: '/bin/bash'
    cmd: |
      while [ ${POTOS_NEW_PASS} != ${POTOS_NEW_PASS2} -o -z ${POTOS_NEW_USER} ]; do
        USERINPUT="$(yad --fullscreen --title '${POTOS_CLIENT_NAME} Setup' \
          --borders 20 --align center \
          --button gtk-ok \
          --button "Change keyboard layout":"/setup/change-keyboard-layout.sh" \
          --image-on-top --image=/setup/potos.png \
          --text \
      "IMPORTANT: If your password contains special characters, please remember to select the appropriate keyboard layout first.

      Please enter your new credentials below
      " \
          --form \
          --field 'Username' \
          --field 'Password:H' \
          --field 'Confirm password:H'
        )"

        POTOS_NEW_USER="$(echo ${USERINPUT} | cut -d '|' -f 1)"
        POTOS_NEW_PASS="$(echo ${USERINPUT} | cut -d '|' -f 2)"
        POTOS_NEW_PASS2="$(echo ${USERINPUT} | cut -d '|' -f 3)"

        if [[ -z ${POTOS_NEW_USER} || -z ${POTOS_NEW_PASS} ]]; then
          yad --title "${POTOS_CLIENT_NAME} Setup" \
            --borders 20 --align center --button gtk-ok --image-on-top \
            --image=/setup/potos.png \
            --text 'Please choose and enter your new credentials.'
        fi
        if [[  ${POTOS_NEW_PASS} != ${POTOS_NEW_PASS2} ]]; then
          yad --title "${POTOS_CLIENT_NAME} Setup" \
            --borders 20 --align center --button gtk-ok --image-on-top \
            --image=/setup/potos.png \
            --text 'Your password was not identical. Please try again.'
        fi
      done
      echo $POTOS_NEW_USER
      echo $POTOS_NEW_PASS
  register: potos_new_user_password

- name: Add local user with sudo permission
  ansible.builtin.user:
    name: "{{ potos_new_user_password.stdout_lines[0] }}"
    password: "{{ potos_new_user_password.stdout_lines[1] | password_hash('sha512') }}"
    groups: sudo
    shell: "{{ potos_firstboot_local_user_add_shell }}"
  when: potos_firstboot_local_user_add_with_sudo == True

- name: Add local user without sudo permission
  ansible.builtin.user:
    name: "{{ potos_new_user_password.stdout_lines[0] }}"
    password: "{{ potos_new_user_password.stdout_lines[1] | password_hash('sha512') }}"
    shell: "{{ potos_firstboot_local_user_add_shell }}"
  when: potos_firstboot_local_user_add_without_sudo == True

- name: Print username from env
  ansible.builtin.shell: . /setup/.env && echo ${POTOS_INITIAL_USERNAME}
  register: potos_firstboot_initial_username
  when: potos_firstboot_initial_user_delete_admin_iso_user == True

- name: Delete initial local user from env
  ansible.builtin.user:
    name: "{{ potos_firstboot_initial_username.stdout }}"
    state: absent
  when: potos_firstboot_initial_user_delete_admin_iso_user == True

# - name: Check hostname script
#   ansible.builtin.stat:
#     path: '{{ potos_firstboot_hostname_script }}'
#   register: potos_firstboot_hostname_script_check

# - name: Get hostname
#   ansible.builtin.shell:
#     cmd: '{{ potos_firstboot_hostname_script }}'
#     register: potos_firstboot_hostname_script_out
#   when: potos_firstboot_hostname_script_check.stat.exists

## Grub replace is in finish.sh in the .iso, we will move that into this playbook later on.

# - name: Update grub config
#   ansible.builtin.replace:
#     path: '/etc/default/grub'
#     regexp: 'GRUB_CMDLINE_LINUX_DEFAULT=.*'
#     replace: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"'
#   tags:
#     - 'molecule-notest'

# - name: Write grub entries
#   ansible.builtin.copy:
#     path: '/etc/grub.d/40_custom'
#     content: 'menuentry {{ potos_firstboot_hostname }} { \n echo {{ potos_firstboot_hostname }} \n}'
#   when: potos_firstboot_hostname is defined

# - name: Update grub
#   ansible.builtin.shell:
#     cmd: '/usr/sbin/update-grub'
#   tags:
#     - 'molecule-notest'

- name: Ask new disk encryption password
  ansible.builtin.shell:
    executable: '/bin/bash'
    cmd: |
      while [ ${POTOS_NEW_LUKS_PW} != ${POTOS_NEW_LUKS_PW2} -o -z ${POTOS_NEW_LUKS_PW2} ]; do
        USERINPUT="$(yad --fullscreen --title '${POTOS_CLIENT_NAME} Setup' \
          --borders 20 --align center \
          --button gtk-ok \
          --button "Change keyboard layout":"/setup/change-keyboard-layout.sh" \
          --image-on-top --image=/setup/potos.png \
          --text \
      "Your disk encryption password needs to be changed now, because the default password is unsecure.

      IMPORTANT: Do not forget your disk encryption boot password! Please note your disk encryption boot password on a very safe plase.

      Please enter your new disk encryption password below
      " \
          --form \
          --field 'Password:H' \
          --field 'Confirm password:H'
        )"

        POTOS_NEW_LUKS_PW="$(echo ${USERINPUT} | cut -d '|' -f 1)"
        POTOS_NEW_LUKS_PW2="$(echo ${USERINPUT} | cut -d '|' -f 2)"

        if [[ -z ${POTOS_NEW_LUKS_PW} ]]; then
          yad --title "${POTOS_CLIENT_NAME} Setup" \
            --borders 20 --align center --button gtk-ok --image-on-top \
            --image=/setup/potos.png \
            --text 'Please choose and enter your new credentials.'
        fi
        if [[  ${POTOS_NEW_LUKS_PW} != ${POTOS_NEW_LUKS_PW2} ]]; then
          yad --title "${POTOS_CLIENT_NAME} Setup" \
            --borders 20 --align center --button gtk-ok --image-on-top \
            --image=/setup/potos.png \
            --text 'Your password was not identical. Please try again.'
        fi
      done
      echo $POTOS_NEW_LUKS_PW
  register: potos_new_luks_password
  when: potos_firstboot_ask_change_disk_enc_pw

- name: Print old luks pw from env
  ansible.builtin.shell: . /setup/.env && echo ${POTOS_DISK_ENCRYPTION_INITIAL_PASSWORD}
  register: potos_old_luks_password
  when: potos_firstboot_ask_change_disk_enc_pw

- name: Change boot disk encryption luks password now
  ansible.builtin.shell:
    executable: '/bin/bash'
    cmd: |
      eval "$(awk '/crypt/ {print $2}' /etc/crypttab)" && LUKS_DEVICE="$(realpath "/dev/disk/by-uuid/${UUID}")"
      printf '%s\n' '{{ potos_old_luks_password.stdout }}' "{{ potos_new_luks_password.stdout }}" | cryptsetup luksChangeKey "${LUKS_DEVICE}" -q
      if [[ $? -ne 0 ]]; then
        echo "# Failed to change primary disk encryption key"
        exit 1
      fi
  when: potos_firstboot_ask_change_disk_enc_pw

- name: Post commands
  ansible.builtin.shell:
    cmd: '{{ item }}'
  loop: '{{ potos_firstboot_postcommands }}'
  when:
    - potos_firstboot_postcommands is defined
    - potos_firstboot_postcommands is iterable
    - potos_firstboot_postcommands is not string
    - potos_firstboot_postcommands is not mapping
